import { Subject } from 'rxjs';
import { ProductLuca } from './ProductLuca';
import { Injectable } from '@angular/core';
import { ProductVariant } from './productVariant';
import * as i0 from "@angular/core";
export class Cart {
    constructor() {
        console.log("someone construcred me!");
        this.products = [];
        this.items = new Subject();
        setInterval(() => {
            // Make your auth call and export this from Service
            //console.log("updating total number = " + this.getTotalNumberOfItems());
            this.items.next(this.getTotalNumberOfItems());
        }, 7000);
    }
    addProductLuca(ProductLuca) {
        //qui check se il prodotto non c'è gia
        this.products.push(ProductLuca);
        localStorage.setItem("cartByLuca", JSON.stringify(this.products));
    }
    getproducts() {
        return this.products;
    }
    getproductsSize() {
        return this.products.length;
    }
    getProduct(index) {
        //console.log("get product = " + this.products[index].getJson());
        return this.products[index];
    }
    getJson() {
        return JSON.stringify(this.products);
    }
    getProductById(id) {
        let product = null;
        this.products.forEach(element => {
            if (element.getId() === id) {
                product = element;
            }
        });
        return product;
    }
    getVariantById(id) {
        let productVariant = null;
        this.products.forEach(element => {
            for (let i = 0; i < element.getVariants().length; i++) {
                let variant = element.getVariants()[i];
                if (variant.getId() === id) {
                    productVariant = variant;
                }
            }
        });
        return productVariant;
    }
    getProductByVariantId(id) {
        let product = null;
        this.products.forEach(element => {
            for (let i = 0; i < element.getVariants().length; i++) {
                let variant = element.getVariants()[i];
                if (variant.getId() === id) {
                    product = element;
                }
            }
        });
        return product;
    }
    updateLocalStorage() {
        localStorage.setItem("cartByLuca", JSON.stringify(this.products));
    }
    static generateCartFromLocalStorage() {
        let cart = new Cart();
        let cartJson = JSON.parse(localStorage.getItem("cartByLuca"));
        if (cartJson == null)
            return new Cart();
        for (let i = 0; i < cartJson.products.length; i++) {
            let productJson = cartJson.products[i];
            //console.log(productJson);
            let p = new ProductLuca();
            p.setId(productJson.id);
            p.setDiscount(productJson.discount);
            p.setPrice(productJson.price);
            //console.log("main img inside json = " + productJson.mainImage);
            p.mainImage = productJson.mainImage;
            p.setName(productJson.name);
            let imagesJson = productJson.images;
            for (let y = 0; y < imagesJson.length; y++) {
                p.addImage(imagesJson[y]);
            }
            let variantsJson = productJson.variants;
            for (let y = 0; y < variantsJson.length; y++) {
                let variantJson = variantsJson[y];
                let pVariant = new ProductVariant(variantJson.id, variantJson.size, variantJson.inventory, variantJson.selected, variantJson.barcode);
                //console.log("pVariant = " + pVariant.getJson());
                p.variants.push(pVariant);
            }
            cart.addProductLuca(p);
        }
        return cart;
    }
    containsProduct(product) {
        let contains = false;
        //console.log("product = " + this.getJson());
        this.products.forEach(element => {
            if (element.getId() === product.getId()) {
                contains = true;
                return;
            }
        });
        return contains;
    }
    getProductIndex(product) {
        if (this.containsProduct(product)) {
            for (let i = 0; i < this.products.length; i++) {
                if (this.products[i].getId() == product.getId()) {
                    return i;
                }
            }
        }
        else {
            return null;
        }
    }
    getAllVariants() {
        let productsVariants = [];
        this.products.forEach(p => {
            p.getVariants().forEach(variant => {
                productsVariants.push(variant);
            });
        });
        return productsVariants;
    }
    getItems() {
        return this.items;
    }
    getTotalNumberOfItems() {
        let total = 0;
        this.products.forEach(p => {
            p.getVariants().forEach(variant => {
                total += variant.getSelected();
            });
        });
        return total;
    }
    getTotalPrice() {
        let total = 0;
        this.products.forEach(p => {
            p.getVariants().forEach(variant => {
                total += variant.getSelected() * p.getPricec();
            });
        });
        return total;
    }
    deleteProductVariant(product) {
        let p = this.getProductByVariantId(product.getId());
        p.removeVariant(product);
    }
    getTotalNumberOfVariantsOfASingleProductByIdOfAVariant(id) {
        let productSize = null;
        this.products.forEach(element => {
            for (let i = 0; i < element.getVariants().length; i++) {
                let variant = element.getVariants()[i];
                if (variant.getId() === id) {
                    productSize = element.getVariants().length;
                }
            }
        });
        return productSize;
    }
}
Cart.ɵfac = function Cart_Factory(t) { return new (t || Cart)(); };
Cart.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: Cart, factory: Cart.ɵfac, providedIn: 'root' });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(Cart, [{
        type: Injectable,
        args: [{
                providedIn: 'root',
            }]
    }], function () { return []; }, null); })();
//# sourceMappingURL=data:application/json;base64,