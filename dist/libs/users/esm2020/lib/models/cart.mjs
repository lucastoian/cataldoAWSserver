import { Subject } from 'rxjs';
import { ProductLuca } from './productLuca';
import { Injectable } from '@angular/core';
import { ProductVariant } from './productVariant';
import * as i0 from "@angular/core";
export class Cart {
    constructor() {
        console.log("someone construcred me!");
        this.products = [];
        this.items = new Subject();
        setInterval(() => {
            // Make your auth call and export this from Service
            //console.log("updating total number = " + this.getTotalNumberOfItems());
            this.items.next(this.getTotalNumberOfItems());
        }, 7000);
    }
    addProductLuca(ProductLuca) {
        //qui check se il prodotto non c'è gia
        this.products.push(ProductLuca);
        localStorage.setItem("cartByLuca", JSON.stringify(this.products));
    }
    emptyCart() {
        this.products = [];
        this.updateLocalStorage();
    }
    getproducts() {
        return this.products;
    }
    getproductsSize() {
        return this.products.length;
    }
    getProduct(index) {
        //console.log("get product = " + this.products[index].getJson());
        return this.products[index];
    }
    getJson() {
        return JSON.stringify(this.products);
    }
    getProductById(id) {
        let product = null;
        this.products.forEach(element => {
            if (element.getId() === id) {
                product = element;
            }
        });
        return product;
    }
    getVariantById(id) {
        let productVariant = null;
        this.products.forEach(element => {
            for (let i = 0; i < element.getVariants().length; i++) {
                let variant = element.getVariants()[i];
                if (variant.getId() === id) {
                    productVariant = variant;
                }
            }
        });
        return productVariant;
    }
    getProductByVariantId(id) {
        let product = null;
        this.products.forEach(element => {
            for (let i = 0; i < element.getVariants().length; i++) {
                let variant = element.getVariants()[i];
                if (variant.getId() === id) {
                    product = element;
                }
            }
        });
        return product;
    }
    updateLocalStorage() {
        localStorage.setItem("cartByLuca", JSON.stringify(this.products));
    }
    static generateCartFromLocalStorage() {
        let cart = new Cart();
        let cartJso2 = localStorage.getItem("cartByLuca");
        console.log("cartJson = " + JSON.stringify(cartJso2));
        //  if(cartJso2 == "[]") return new Cart();
        let cartJson = JSON.parse(localStorage.getItem("cartByLuca"));
        for (let i = 0; i < cartJson.products.length; i++) {
            let productJson = cartJson.products[i];
            //console.log(productJson);
            let p = new ProductLuca();
            p.setId(productJson.id);
            p.setDiscount(productJson.discount);
            p.setPrice(productJson.price);
            //console.log("main img inside json = " + productJson.mainImage);
            p.mainImage = productJson.mainImage;
            p.setName(productJson.name);
            let imagesJson = productJson.images;
            for (let y = 0; y < imagesJson.length; y++) {
                p.addImage(imagesJson[y]);
            }
            let variantsJson = productJson.variants;
            for (let y = 0; y < variantsJson.length; y++) {
                let variantJson = variantsJson[y];
                let pVariant = new ProductVariant(variantJson.id, variantJson.size, variantJson.inventory, variantJson.selected, variantJson.barcode);
                //console.log("pVariant = " + pVariant.getJson());
                p.variants.push(pVariant);
            }
            cart.addProductLuca(p);
        }
        console.log("ho trovato questo carrello: " + JSON.stringify(cart));
        return cart;
    }
    containsProduct(product) {
        let contains = false;
        //console.log("product = " + this.getJson());
        this.products.forEach(element => {
            if (element.getId() === product.getId()) {
                contains = true;
                return;
            }
        });
        return contains;
    }
    getProductIndex(product) {
        if (this.containsProduct(product)) {
            for (let i = 0; i < this.products.length; i++) {
                if (this.products[i].getId() == product.getId()) {
                    return i;
                }
            }
        }
        else {
            return null;
        }
    }
    getAllVariants() {
        let productsVariants = [];
        this.products.forEach(p => {
            p.getVariants().forEach(variant => {
                productsVariants.push(variant);
            });
        });
        return productsVariants;
    }
    getItems() {
        return this.items;
    }
    getTotalNumberOfItems() {
        let total = 0;
        this.products.forEach(p => {
            p.getVariants().forEach(variant => {
                total += variant.getSelected();
            });
        });
        return total;
    }
    getTotalPrice() {
        let total = 0;
        this.products.forEach(p => {
            p.getVariants().forEach(variant => {
                total += variant.getSelected() * p.getPricec();
            });
        });
        return total;
    }
    deleteProductVariant(product) {
        let p = this.getProductByVariantId(product.getId());
        p.removeVariant(product);
    }
    getTotalNumberOfVariantsOfASingleProductByIdOfAVariant(id) {
        let productSize = null;
        this.products.forEach(element => {
            for (let i = 0; i < element.getVariants().length; i++) {
                let variant = element.getVariants()[i];
                if (variant.getId() === id) {
                    productSize = element.getVariants().length;
                }
            }
        });
        return productSize;
    }
}
Cart.ɵfac = function Cart_Factory(t) { return new (t || Cart)(); };
Cart.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: Cart, factory: Cart.ɵfac, providedIn: 'root' });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(Cart, [{
        type: Injectable,
        args: [{
                providedIn: 'root',
            }]
    }], function () { return []; }, null); })();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FydC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL2xpYnMvdXNlcnMvc3JjL2xpYi9tb2RlbHMvY2FydC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQWMsT0FBTyxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBQzNDLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxlQUFlLENBQUE7QUFDM0MsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sa0JBQWtCLENBQUM7O0FBTWxELE1BQU0sT0FBTyxJQUFJO0lBS2I7UUFDSSxPQUFPLENBQUMsR0FBRyxDQUFDLHlCQUF5QixDQUFDLENBQUM7UUFDdkMsSUFBSSxDQUFDLFFBQVEsR0FBRyxFQUFFLENBQUM7UUFDbkIsSUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLE9BQU8sRUFBRSxDQUFDO1FBQzNCLFdBQVcsQ0FBQyxHQUFHLEVBQUU7WUFDYixtREFBbUQ7WUFDbkQseUVBQXlFO1lBQ3pFLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxxQkFBcUIsRUFBRSxDQUFDLENBQUM7UUFDaEQsQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFBO0lBQ2QsQ0FBQztJQUVNLGNBQWMsQ0FBQyxXQUF3QjtRQUMxQyxzQ0FBc0M7UUFDdEMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUM7UUFDaEMsWUFBWSxDQUFDLE9BQU8sQ0FBQyxZQUFZLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQztJQUV0RSxDQUFDO0lBRU0sU0FBUztRQUNaLElBQUksQ0FBQyxRQUFRLEdBQUcsRUFBRSxDQUFDO1FBQ25CLElBQUksQ0FBQyxrQkFBa0IsRUFBRSxDQUFDO0lBQzlCLENBQUM7SUFFTSxXQUFXO1FBQ2QsT0FB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Q0FBQyxFQUFTO1FBQ25FLElBQUksV0FBVyxHQUFHLElBQUksQ0FBQztRQUN2QixJQUFJLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsRUFBRTtZQUU1QixLQUFJLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUMsT0FBTyxDQUFDLFdBQVcsRUFBRSxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBQztnQkFDL0MsSUFBSSxPQUFPLEdBQUcsT0FBTyxDQUFDLFdBQVcsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUN2QyxJQUFHLE9BQU8sQ0FBQyxLQUFLLEVBQUUsS0FBSyxFQUFFLEVBQUM7b0JBQ3RCLFdBQVcsR0FBRyxPQUFPLENBQUMsV0FBVyxFQUFFLENBQUMsTUFBTSxDQUFDO2lCQUM5QzthQUNKO1FBRUwsQ0FBQyxDQUFDLENBQUM7UUFDSCxPQUFRLFdBQVcsQ0FBQztJQUN4QixDQUFDOzt3REFoT1EsSUFBSTswREFBSixJQUFJLFdBQUosSUFBSSxtQkFGRCxNQUFNO3VGQUVULElBQUk7Y0FIaEIsVUFBVTtlQUFDO2dCQUNSLFVBQVUsRUFBRSxNQUFNO2FBQ25CIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgT2JzZXJ2YWJsZSwgU3ViamVjdCB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgUHJvZHVjdEx1Y2EgfSBmcm9tICcuL3Byb2R1Y3RMdWNhJ1xuaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgUHJvZHVjdFZhcmlhbnQgfSBmcm9tICcuL3Byb2R1Y3RWYXJpYW50JztcblxuXG5ASW5qZWN0YWJsZSh7XG4gICAgcHJvdmlkZWRJbjogJ3Jvb3QnLFxuICB9KVxuZXhwb3J0IGNsYXNzIENhcnR7XG5cbiAgICBwcml2YXRlIHByb2R1Y3RzOiBQcm9kdWN0THVjYVtdO1xuICAgIHByaXZhdGUgaXRlbXM6IFN1YmplY3Q8bnVtYmVyPjtcblxuICAgIGNvbnN0cnVjdG9yKCl7XG4gICAgICAgIGNvbnNvbGUubG9nKFwic29tZW9uZSBjb25zdHJ1Y3JlZCBtZSFcIik7XG4gICAgICAgIHRoaXMucHJvZHVjdHMgPSBbXTtcbiAgICAgICAgdGhpcy5pdGVtcyA9IG5ldyBTdWJqZWN0KCk7XG4gICAgICAgIHNldEludGVydmFsKCgpID0+IHtcbiAgICAgICAgICAgIC8vIE1ha2UgeW91ciBhdXRoIGNhbGwgYW5kIGV4cG9ydCB0aGlzIGZyb20gU2VydmljZVxuICAgICAgICAgICAgLy9jb25zb2xlLmxvZyhcInVwZGF0aW5nIHRvdGFsIG51bWJlciA9IFwiICsgdGhpcy5nZXRUb3RhbE51bWJlck9mSXRlbXMoKSk7XG4gICAgICAgICAgICB0aGlzLml0ZW1zLm5leHQodGhpcy5nZXRUb3RhbE51bWJlck9mSXRlbXMoKSk7XG4gICAgICAgICAgfSwgNzAwMClcbiAgICB9XG5cbiAgICBwdWJsaWMgYWRkUHJvZHVjdEx1Y2EoUHJvZHVjdEx1Y2E6IFByb2R1Y3RMdWNhKSA6dm9pZCB7XG4gICAgICAgIC8vcXVpIGNoZWNrIHNlIGlsIHByb2RvdHRvIG5vbiBjJ8OoIGdpYVxuICAgICAgICB0aGlzLnByb2R1Y3RzLnB1c2goUHJvZHVjdEx1Y2EpO1xuICAgICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbShcImNhcnRCeUx1Y2FcIiwgSlNPTi5zdHJpbmdpZnkodGhpcy5wcm9kdWN0cykpO1xuXG4gICAgfVxuXG4gICAgcHVibGljIGVtcHR5Q2FydCgpe1xuICAgICAgICB0aGlzLnByb2R1Y3RzID0gW107XG4gICAgICAgIHRoaXMudXBkYXRlTG9jYWxTdG9yYWdlKCk7XG4gICAgfVxuXG4gICAgcHVibGljIGdldHByb2R1Y3RzKCkgOiBQcm9kdWN0THVjYVtdIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucHJvZHVjdHM7XG4gICAgfVxuXG4gICAgcHVibGljIGdldHByb2R1Y3RzU2l6ZSgpIDogbnVtYmVye1xuICAgICAgICByZXR1cm4gdGhpcy5wcm9kdWN0cy5sZW5ndGg7XG4gICAgfVxuICAgIHB1YmxpYyBnZXRQcm9kdWN0KGluZGV4Om51bWJlcikgOiBQcm9kdWN0THVjYSB7XG4gICAgICAgICAgICAvL2NvbnNvbGUubG9nKFwiZ2V0IHByb2R1Y3QgPSBcIiArIHRoaXMucHJvZHVjdHNbaW5kZXhdLmdldEpzb24oKSk7XG4gICAgICAgIHJldHVybiB0aGlzLnByb2R1Y3RzW2luZGV4XTtcbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0SnNvbigpIDogc3RyaW5nIHtcbiAgICAgICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KHRoaXMucHJvZHVjdHMpO1xuICAgIH1cblxuICAgIHB1YmxpYyBnZXRQcm9kdWN0QnlJZChpZDpzdHJpbmcpIDogUHJvZHVjdEx1Y2Ege1xuICAgICAgICBsZXQgcHJvZHVjdCA9IG51bGw7XG4gICAgICAgIHRoaXMucHJvZHVjdHMuZm9yRWFjaChlbGVtZW50ID0+IHtcbiAgICAgICAgICAgIGlmKGVsZW1lbnQuZ2V0SWQoKSA9PT0gaWQpe1xuICAgICAgICAgICAgICAgIHByb2R1Y3QgPSBlbGVtZW50O1xuXG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gcHJvZHVjdDtcbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0VmFyaWFudEJ5SWQoaWQ6c3RyaW5nKSA6IFByb2R1Y3RWYXJpYW50IHtcbiAgICAgICAgbGV0IHByb2R1Y3RWYXJpYW50ID0gbnVsbDtcbiAgICAgICAgdGhpcy5wcm9kdWN0cy5mb3JFYWNoKGVsZW1lbnQgPT4ge1xuXG4gICAgICAgICAgICBmb3IobGV0IGkgPSAwOyBpPGVsZW1lbnQuZ2V0VmFyaWFudHMoKS5sZW5ndGg7IGkrKyl7XG4gICAgICAgICAgICAgICAgbGV0IHZhcmlhbnQgPSBlbGVtZW50LmdldFZhcmlhbnRzKClbaV07XG4gICAgICAgICAgICAgICAgaWYodmFyaWFudC5nZXRJZCgpID09PSBpZCl7XG4gICAgICAgICAgICAgICAgICAgIHByb2R1Y3RWYXJpYW50ID0gdmFyaWFudDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBwcm9kdWN0VmFyaWFudDtcbiAgICB9XG5cblxuICAgIHB1YmxpYyBnZXRQcm9kdWN0QnlWYXJpYW50SWQoaWQ6c3RyaW5nKSA6IFByb2R1Y3RMdWNhIHtcbiAgICAgICAgbGV0IHByb2R1Y3QgPSBudWxsO1xuICAgICAgICB0aGlzLnByb2R1Y3RzLmZvckVhY2goZWxlbWVudCA9PiB7XG5cbiAgICAgICAgICAgIGZvcihsZXQgaSA9IDA7IGk8ZWxlbWVudC5nZXRWYXJpYW50cygpLmxlbmd0aDsgaSsrKXtcbiAgICAgICAgICAgICAgICBsZXQgdmFyaWFudCA9IGVsZW1lbnQuZ2V0VmFyaWFudHMoKVtpXTtcbiAgICAgICAgICAgICAgICBpZih2YXJpYW50LmdldElkKCkgPT09IGlkKXtcbiAgICAgICAgICAgICAgICAgICAgcHJvZHVjdCA9IGVsZW1lbnQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gcHJvZHVjdDtcbiAgICB9XG5cbiAgICBwdWJsaWMgdXBkYXRlTG9jYWxTdG9yYWdlKCk6dm9pZHtcbiAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oXCJjYXJ0QnlMdWNhXCIsIEpTT04uc3RyaW5naWZ5KHRoaXMucHJvZHVjdHMpKTtcbiAgICB9XG5cbiAgICAgc3RhdGljIGdlbmVyYXRlQ2FydEZyb21Mb2NhbFN0b3JhZ2UoKTpDYXJ0e1xuXG4gICAgICAgIGxldCBjYXJ0ID0gbmV3IENhcnQoKTtcbiAgICAgICAgbGV0IGNhcnRKc28yID0gbG9jYWxTdG9yYWdlLmdldEl0ZW0oXCJjYXJ0QnlMdWNhXCIpO1xuICAgICAgICBjb25zb2xlLmxvZyhcImNhcnRKc29uID0gXCIgKyBKU09OLnN0cmluZ2lmeShjYXJ0SnNvMikpO1xuICAgICAgLy8gIGlmKGNhcnRKc28yID09IFwiW11cIikgcmV0dXJuIG5ldyBDYXJ0KCk7XG4gICAgICBcbiAgICAgICAgIGxldCAgIGNhcnRKc29uID0gSlNPTi5wYXJzZShsb2NhbFN0b3JhZ2UuZ2V0SXRlbShcImNhcnRCeUx1Y2FcIikpO1xuICAgICAgICBmb3IobGV0IGkgPSAwOyBpPGNhcnRKc29uLnByb2R1Y3RzLmxlbmd0aDsgaSsrKXtcbiAgICAgICAgICAgIGxldCBwcm9kdWN0SnNvbiA9Y2FydEpzb24ucHJvZHVjdHNbaV07XG4gICAgICAgICAgICAvL2NvbnNvbGUubG9nKHByb2R1Y3RKc29uKTtcbiAgICAgICAgICAgIGxldCBwID0gbmV3IFByb2R1Y3RMdWNhKCk7XG4gICAgICAgICAgICBwLnNldElkKHByb2R1Y3RKc29uLmlkKTtcbiAgICAgICAgICAgIHAuc2V0RGlzY291bnQocHJvZHVjdEpzb24uZGlzY291bnQpO1xuICAgICAgICAgICAgcC5zZXRQcmljZShwcm9kdWN0SnNvbi5wcmljZSk7XG4gICAgICAgICAgICAvL2NvbnNvbGUubG9nKFwibWFpbiBpbWcgaW5zaWRlIGpzb24gPSBcIiArIHByb2R1Y3RKc29uLm1haW5JbWFnZSk7XG4gICAgICAgICAgICBwLm1haW5JbWFnZSA9IHByb2R1Y3RKc29uLm1haW5JbWFnZTtcbiAgICAgICAgICAgIHAuc2V0TmFtZShwcm9kdWN0SnNvbi5uYW1lKTtcblxuICAgICAgICAgICAgbGV0IGltYWdlc0pzb24gPSBwcm9kdWN0SnNvbi5pbWFnZXM7XG4gICAgICAgICAgICBmb3IobGV0IHkgPSAwOyB5PGltYWdlc0pzb24ubGVuZ3RoOyB5Kyspe1xuICAgICAgICAgICAgICAgIHAuYWRkSW1hZ2UoaW1hZ2VzSnNvblt5XSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGxldCB2YXJpYW50c0pzb24gPSBwcm9kdWN0SnNvbi52YXJpYW50cztcbiAgICAgICAgICAgIGZvcihsZXQgeSA9IDA7IHk8dmFyaWFudHNKc29uLmxlbmd0aDsgeSsrKXtcbiAgICAgICAgICAgICAgICBsZXQgdmFyaWFudEpzb24gPSB2YXJpYW50c0pzb25beV07XG4gICAgICAgICAgICAgICAgbGV0IHBWYXJpYW50ID0gbmV3IFByb2R1Y3RWYXJpYW50KHZhcmlhbnRKc29uLmlkLCB2YXJpYW50SnNvbi5zaXplLCB2YXJpYW50SnNvbi5pbnZlbnRvcnksIHZhcmlhbnRKc29uLnNlbGVjdGVkLCB2YXJpYW50SnNvbi5iYXJjb2RlKTtcbiAgICAgICAgICAgICAgICAvL2NvbnNvbGUubG9nKFwicFZhcmlhbnQgPSBcIiArIHBWYXJpYW50LmdldEpzb24oKSk7XG4gICAgICAgICAgICAgICAgcC52YXJpYW50cy5wdXNoKHBWYXJpYW50KTtcblxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBjYXJ0LmFkZFByb2R1Y3RMdWNhKHApO1xuXG5cbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnNvbGUubG9nKFwiaG8gdHJvdmF0byBxdWVzdG8gY2FycmVsbG86IFwiICsgSlNPTi5zdHJpbmdpZnkoY2FydCkpO1xuICAgICAgICByZXR1cm4gY2FydDtcblxuICAgIH1cblxuICAgIHB1YmxpYyBjb250YWluc1Byb2R1Y3QocHJvZHVjdDogUHJvZHVjdEx1Y2EpOiBib29sZWFue1xuICAgICAgICBsZXQgY29udGFpbnMgPSBmYWxzZTtcbiAgICAgICAgLy9jb25zb2xlLmxvZyhcInByb2R1Y3QgPSBcIiArIHRoaXMuZ2V0SnNvbigpKTtcbiAgICAgICAgdGhpcy5wcm9kdWN0cy5mb3JFYWNoKGVsZW1lbnQgPT4ge1xuICAgICAgICAgICAgaWYoZWxlbWVudC5nZXRJZCgpID09PSBwcm9kdWN0LmdldElkKCkpe1xuICAgICAgICAgICAgICAgIGNvbnRhaW5zID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHJldHVybiBjb250YWlucztcbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0UHJvZHVjdEluZGV4KHByb2R1Y3Q6IFByb2R1Y3RMdWNhKTogbnVtYmVye1xuICAgICAgIGlmKHRoaXMuY29udGFpbnNQcm9kdWN0KHByb2R1Y3QpKXtcbiAgICAgICAgICAgIGZvcihsZXQgaSA9IDA7IGk8dGhpcy5wcm9kdWN0cy5sZW5ndGg7IGkrKyl7XG4gICAgICAgICAgICAgICAgaWYodGhpcy5wcm9kdWN0c1tpXS5nZXRJZCgpID09IHByb2R1Y3QuZ2V0SWQoKSl7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICB9ZWxzZXtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgfVxuICAgIH1cblxuICAgIHB1YmxpYyBnZXRBbGxWYXJpYW50cygpOiBQcm9kdWN0VmFyaWFudFtde1xuXG4gICAgICAgIGxldCBwcm9kdWN0c1ZhcmlhbnRzOlByb2R1Y3RWYXJpYW50W10gPSBbXTtcblxuICAgICAgICB0aGlzLnByb2R1Y3RzLmZvckVhY2gocCA9PiB7XG5cbiAgICAgICAgICAgIHAuZ2V0VmFyaWFudHMoKS5mb3JFYWNoKHZhcmlhbnQgPT4ge1xuICAgICAgICAgICAgICAgIHByb2R1Y3RzVmFyaWFudHMucHVzaCh2YXJpYW50KTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgIH0pO1xuXG4gICAgICAgIHJldHVybiBwcm9kdWN0c1ZhcmlhbnRzO1xuICAgIH1cblxuXG4gICAgcHVibGljIGdldEl0ZW1zKCk6IE9ic2VydmFibGU8bnVtYmVyPntcbiAgICAgICAgcmV0dXJuIHRoaXMuaXRlbXM7XG4gICAgfVxuXG4gICAgcHVibGljIGdldFRvdGFsTnVtYmVyT2ZJdGVtcygpIDogbnVtYmVye1xuICAgICAgICBsZXQgdG90YWw6bnVtYmVyID0gMDtcbiAgICAgICAgdGhpcy5wcm9kdWN0cy5mb3JFYWNoKHAgPT4ge1xuXG4gICAgICAgICAgICBwLmdldFZhcmlhbnRzKCkuZm9yRWFjaCh2YXJpYW50ID0+IHtcbiAgICAgICAgICAgICAgICB0b3RhbCArPSB2YXJpYW50LmdldFNlbGVjdGVkKClcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgIH0pO1xuXG4gICAgICAgIHJldHVybiB0b3RhbDtcbiAgICB9XG5cblxuICAgIHB1YmxpYyBnZXRUb3RhbFByaWNlKCkgOiBudW1iZXJ7XG4gICAgICAgIGxldCB0b3RhbDpudW1iZXIgPSAwO1xuICAgICAgICB0aGlzLnByb2R1Y3RzLmZvckVhY2gocCA9PiB7XG5cbiAgICAgICAgICAgIHAuZ2V0VmFyaWFudHMoKS5mb3JFYWNoKHZhcmlhbnQgPT4ge1xuICAgICAgICAgICAgICAgIHRvdGFsICs9IHZhcmlhbnQuZ2V0U2VsZWN0ZWQoKSAqIHAuZ2V0UHJpY2VjKCk7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm4gdG90YWw7XG4gICAgfVxuXG5cbiAgICBwdWJsaWMgZGVsZXRlUHJvZHVjdFZhcmlhbnQocHJvZHVjdDogUHJvZHVjdFZhcmlhbnQpIDogdm9pZHtcbiAgICAgICAgbGV0IHAgOiBQcm9kdWN0THVjYSA9IHRoaXMuZ2V0UHJvZHVjdEJ5VmFyaWFudElkKHByb2R1Y3QuZ2V0SWQoKSk7XG4gICAgICAgIHAucmVtb3ZlVmFyaWFudChwcm9kdWN0KTtcbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0VG90YWxOdW1iZXJPZlZhcmlhbnRzT2ZBU2luZ2xlUHJvZHVjdEJ5SWRPZkFWYXJpYW50KGlkOnN0cmluZykgOiBudW1iZXIge1xuICAgICAgICBsZXQgcHJvZHVjdFNpemUgPSBudWxsO1xuICAgICAgICB0aGlzLnByb2R1Y3RzLmZvckVhY2goZWxlbWVudCA9PiB7XG5cbiAgICAgICAgICAgIGZvcihsZXQgaSA9IDA7IGk8ZWxlbWVudC5nZXRWYXJpYW50cygpLmxlbmd0aDsgaSsrKXtcbiAgICAgICAgICAgICAgICBsZXQgdmFyaWFudCA9IGVsZW1lbnQuZ2V0VmFyaWFudHMoKVtpXTtcbiAgICAgICAgICAgICAgICBpZih2YXJpYW50LmdldElkKCkgPT09IGlkKXtcbiAgICAgICAgICAgICAgICAgICAgcHJvZHVjdFNpemUgPSBlbGVtZW50LmdldFZhcmlhbnRzKCkubGVuZ3RoO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuICBwcm9kdWN0U2l6ZTtcbiAgICB9XG59XG4iXX0=