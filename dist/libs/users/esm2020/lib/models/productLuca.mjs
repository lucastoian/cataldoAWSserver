export class ProductLuca {
    constructor() {
        this.images = [];
        this.variants = [];
    }
    setImg(img) {
        this.mainImage = img;
    }
    setVariant(variant) {
        variant.setMainProductImage(this.mainImage);
        variant.setMainProductName(this.name);
        this.variants.push(variant);
    }
    /**
     * Aggiunge una variante di un prodotto
     * @param variant la variante da aggiungere
     * @param quantity la quantita da aggiungere
     * Se la variante esiste già, ne incrementa la quantita, altrimenti aggiunge una nuova variante
     */
    addVariant(variant, quantity) {
        variant.setMainProductImage(this.mainImage);
        variant.setMainProductName(this.name);
        console.log("adding this quantity: " + quantity);
        if (this.containsVariant(variant)) {
            let index = this.variants.findIndex(p => p.getId() == variant.getId());
            console.log("items available in the inventory =  " + this.variants[index].getInventory());
            console.log("adding this quantity: " + (this.variants[index].getSelected() + quantity));
            this.variants[index].addSelected(quantity);
            console.log("ok");
            return;
        }
        else {
            variant.setSelected(quantity);
            this.variants.push(variant);
        }
    }
    addVariantNoQuantity(variant) {
        variant.setMainProductImage(this.mainImage);
        variant.setMainProductName(this.name);
        this.variants.push(variant);
    }
    removeVariant(variant) {
        let index = this.variants.findIndex(product => product.getId() == variant.getId());
        this.variants.splice(index, 1);
    }
    getVariant(variant) {
        let index = this.variants.findIndex(product => product.getId() == variant.getId());
        return this.variants[index];
    }
    getVariantBySize(size) {
        let index = this.variants.findIndex(product => product.getSize() === size);
        return this.variants[index];
    }
    getVariants() {
        return this.variants;
    }
    getId() {
        return this.id;
    }
    getName() {
        return this.name;
    }
    getDiscount() {
        return this.discount;
    }
    getJson() {
        return JSON.stringify(this);
    }
    getPricec() {
        return this.price;
    }
    setId(id) {
        this.id = id;
    }
    setDiscount(discount) {
        this.discount = discount;
    }
    setPrice(price) {
        this.price = price;
    }
    setTheMainImage(mainImage) {
        this.mainImage = mainImage;
    }
    getMainImage() {
        return this.mainImage;
    }
    addImage(image) {
        this.images.push(image);
    }
    setName(name) {
        this.name = name;
    }
    /**
     * metodo che controlla la presenza o meno di una variante
     * @param productVariant variante da controllare
     * @returns restituisce true se la variant è gia presente nel prodotto, false altrimenti
     */
    containsVariant(productVariant) {
        let contains = false;
        //  console.log("product = " + this.getJson());
        this.variants.forEach(element => {
            if (element.getId().match(productVariant.getId()) != null) {
                contains = true;
                return;
            }
        });
        return contains;
    }
}
//# sourceMappingURL=data:application/json;base64,