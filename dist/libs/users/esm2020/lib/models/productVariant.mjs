export class ProductVariant {
    constructor(id, size, inventory, selected, barcode) {
        this.id = id;
        this.size = size;
        this.inventory = inventory;
        this.maxInventory = inventory;
        this.selected = selected;
        this.barcode = barcode;
    }
    /**
     * Incrementa il numero di prodotti di questa variante selezionati
     */
    addProduct() {
        if (this.inventory - (this.selected + 1) <= 0) {
            throw new Error("Not enough items in the inventory");
        }
        this.selected++;
        this.inventory = this.inventory - this.selected;
    }
    getId() {
        return this.id;
    }
    getMaxInventory() {
        return this.maxInventory;
    }
    getInventory() {
        return this.inventory;
    }
    getSize() {
        return this.size;
    }
    getJson() {
        return JSON.stringify(this);
    }
    setId(id) {
        this.id = id;
    }
    setSize(size) {
        this.size = size;
    }
    setInventory(inventory) {
        this.inventory = inventory;
    }
    setSelected(select) {
        if (this.inventory - (this.selected + select) < 0) {
            throw new Error("Not enough items in the inventory");
        }
        this.selected = select;
        this.inventory = this.inventory - this.selected;
    }
    setSelectedAndUpdateInventory(select) {
        console.log("actual inventory = " + this.inventory + " actual selected items = " + this.selected + " new selected items = " + select);
        if (select >= this.selected) {
            //aggiungo items nell inventario
            this.inventory = this.selected;
            this.selected = select;
        }
        else {
            //tolgo items dall'inventario
            this.inventory = this.selected;
            this.selected = select;
        }
    }
    addSelected(select) {
        if ((this.inventory - select) < 0) {
            throw new Error("Not enough items in the inventory");
        }
        this.selected += select;
        this.inventory = this.inventory - select;
    }
    adminSetSelected(select) {
        this.selected = select;
    }
    getSelected() {
        return this.selected;
    }
    setBarcode(barcode) {
        this.barcode = barcode;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvZHVjdFZhcmlhbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9saWJzL3VzZXJzL3NyYy9saWIvbW9kZWxzL3Byb2R1Y3RWYXJpYW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE1BQU0sT0FBTyxjQUFjO0lBV3ZCLFlBQVksRUFBUyxFQUFFLElBQVksRUFBRSxTQUFpQixFQUFFLFFBQWdCLEVBQUUsT0FBYztRQUNwRixJQUFJLENBQUMsRUFBRSxHQUFHLEVBQUUsQ0FBQztRQUNiLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDO1FBQ2pCLElBQUksQ0FBQyxTQUFTLEdBQUcsU0FBUyxDQUFDO1FBQzNCLElBQUksQ0FBQyxZQUFZLEdBQUcsU0FBUyxDQUFDO1FBQzlCLElBQUksQ0FBQyxRQUFRLEdBQUcsUUFBUSxDQUFDO1FBQ3pCLElBQUksQ0FBQyxPQUFPLEdBQUcsT0FBTyxDQUFDO0lBQzNCLENBQUM7SUFHRDs7T0FFRztJQUNJLFVBQVU7UUFDYixJQUFHLElBQUksQ0FBQyxTQUFTLEdBQUcsQ0FBQyxJQUFJLENBQUMsUUFBUSxHQUFFLENBQUMsQ0FBQyxJQUFFLENBQUMsRUFBQztZQUN0QyxNQUFNLElBQUksS0FBSyxDQUFDLG1DQUFtQyxDQUFDLENBQUM7U0FDeEQ7UUFDRCxJQUFJLENBQUMsUUFBUSxFQUFFLENBQUM7UUFFaEIsSUFBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUM7SUFFcEQsQ0FBQztJQUVNLEtBQUs7UUFDUixPQUFPLElBQUksQ0FBQyxFQUFFLENBQUM7SUFDbkIsQ0FBQztJQUNNLGVBQWU7UUFDbEIsT0FBTyxJQUFJLENBQUMsWUFBWSxDQUFDO0lBQzdCLENBQUM7SUFFTSxZQUFZO1FBQ2YsT0FBTyxJQUFJLENBQUMsU0FBUyxDQUFDO0lBQzFCLENBQUM7SUFDTSxPQUFPO1FBQ1YsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDO0lBQ3JCLENBQUM7SUFFTSxPQUFPO1FBRVYsT0FBTyxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ2hDLENBQUM7SUFFTSxLQUFLLENBQUMsRUFBUztRQUNsQixJQUFJLENBQUMsRUFBRSxHQUFHLEVBQUUsQ0FBQztJQUNqQixDQUFDO0lBQ00sT0FBTyxDQUFDLElBQVc7UUFDdEIsSUFBSSxDQUFDLElBQUksR0FBQyxJQUFJLENBQUM7SUFDbkIsQ0FBQztJQUNNLFlBQVksQ0FBQyxTQUFnQjtRQUNoQyxJQUFJLENBQUMsU0FBUyxHQUFDLFNBQVMsQ0FBQztJQUM3QixDQUFDO0lBQ00sV0FBVyxDQUFDLE1BQWE7UUFFNUIsSUFBRyxJQUFJLENBQUMsU0FBUyxHQUFHLENBQUMsSUFBSSxDQUFDLFFBQVEsR0FBRyxNQUFNLENBQUMsR0FBQyxDQUFDLEVBQUM7WUFDM0MsTUFBTSxJQUFJLEtBQUssQ0FBQyxtQ0FBbUMsQ0FBQyxDQUFDO1NBQ3hEO1FBQ0QsSUFBSSxDQUFDLFFBQVEsR0FBRyxNQUFNLENBQUM7UUFDdkIsSUFBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUM7SUFFcEQsQ0FBQztJQUVNLDZCQUE2QixDQUFDLE1BQWE7UUFDOUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxxQkFBcUIsR0FBRyxJQUFJLENBQUMsU0FBUyxHQUFHLDJCQUEyQixHQUFHLElBQUksQ0FBQyxRQUFRLEdBQUcsd0JBQXdCLEdBQUcsTUFBTSxDQUFDLENBQUM7UUFFdEksSUFBRyxNQUFNLElBQUksSUFBSSxDQUFDLFFBQVEsRUFBQztZQUN2QixnQ0FBZ0M7WUFFaEMsSUFBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDO1lBQy9CLElBQUksQ0FBQyxRQUFRLEdBQUcsTUFBTSxDQUFDO1NBQzFCO2FBQUk7WUFDRCw2QkFBNkI7WUFFN0IsSUFBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDO1lBQy9CLElBQUksQ0FBQyxRQUFRLEdBQUcsTUFBTSxDQUFDO1NBQzFCO0lBRUwsQ0FBQztJQUdNLFdBQVcsQ0FBQyxNQUFhO1FBRTVCLElBQUcsQ0FBQyxJQUFJLENBQUMsU0FBUyxHQUFJLE1BQU0sQ0FBQyxHQUFDLENBQUMsRUFBQztZQUM1QixNQUFNLElBQUksS0FBSyxDQUFDLG1DQUFtQyxDQUFDLENBQUM7U0FDeEQ7UUFDRCxJQUFJLENBQUMsUUFBUSxJQUFJLE1BQU0sQ0FBQztRQUN4QixJQUFJLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQyxTQUFTLEdBQUcsTUFBTSxDQUFDO0lBRTdDLENBQUM7SUFFTSxnQkFBZ0IsQ0FBQyxNQUFhO1FBQ2pDLElBQUksQ0FBQyxRQUFRLEdBQUcsTUFBTSxDQUFDO0lBRzNCLENBQUM7SUFDTSxXQUFXO1FBQ2QsT0FBTyxJQUFJLENBQUMsUUFBUSxDQUFDO0lBSXpCLENBQUM7SUFDTSxVQUFVLENBQUMsT0FBYztRQUM1QixJQUFJLENBQUMsT0FBTyxHQUFHLE9BQU8sQ0FBQztJQUMzQixDQUFDO0NBR0oiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgY2xhc3MgUHJvZHVjdFZhcmlhbnR7XHJcblxyXG4gICAgIC8qKmlkIGRlbGxhIHZhcmlhbnRlIGRlbCBwcm9kb3R0byAqL1xyXG4gICAgcHJpdmF0ZSBpZDogc3RyaW5nO1xyXG4gICAgcHJpdmF0ZSBzaXplOiBudW1iZXI7XHJcbiAgICBwcml2YXRlIGludmVudG9yeTogbnVtYmVyO1xyXG4gICAgcHJpdmF0ZSBzZWxlY3RlZDogbnVtYmVyO1xyXG4gICAgcHVibGljIG1heEludmVudG9yeTogbnVtYmVyO1xyXG4gICAgcHJpdmF0ZSBiYXJjb2RlOiBzdHJpbmc7XHJcblxyXG5cclxuICAgIGNvbnN0cnVjdG9yKGlkOnN0cmluZywgc2l6ZTogbnVtYmVyLCBpbnZlbnRvcnk6IG51bWJlciwgc2VsZWN0ZWQ6IG51bWJlciwgYmFyY29kZTpzdHJpbmcpe1xyXG4gICAgICAgIHRoaXMuaWQgPSBpZDtcclxuICAgICAgICB0aGlzLnNpemUgPSBzaXplO1xyXG4gICAgICAgIHRoaXMuaW52ZW50b3J5ID0gaW52ZW50b3J5O1xyXG4gICAgICAgIHRoaXMubWF4SW52ZW50b3J5ID0gaW52ZW50b3J5O1xyXG4gICAgICAgIHRoaXMuc2VsZWN0ZWQgPSBzZWxlY3RlZDtcclxuICAgICAgICB0aGlzLmJhcmNvZGUgPSBiYXJjb2RlO1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqIEluY3JlbWVudGEgaWwgbnVtZXJvIGRpIHByb2RvdHRpIGRpIHF1ZXN0YSB2YXJpYW50ZSBzZWxlemlvbmF0aVxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgYWRkUHJvZHVjdCgpIDp2b2lkIHtcclxuICAgICAgICBpZih0aGlzLmludmVudG9yeSAtICh0aGlzLnNlbGVjdGVkICsxKTw9MCl7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIk5vdCBlbm91Z2ggaXRlbXMgaW4gdGhlIGludmVudG9yeVwiKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5zZWxlY3RlZCsrO1xyXG5cclxuICAgICAgICB0aGlzLmludmVudG9yeSA9IHRoaXMuaW52ZW50b3J5IC0gdGhpcy5zZWxlY3RlZDtcclxuICAgICAgIFxyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBnZXRJZCgpIDpzdHJpbmcge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmlkO1xyXG4gICAgfVxyXG4gICAgcHVibGljIGdldE1heEludmVudG9yeSgpIDpudW1iZXIge1xyXG4gICAgICAgIHJldHVybiB0aGlzLm1heEludmVudG9yeTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgZ2V0SW52ZW50b3J5KCkgOm51bWJlciB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuaW52ZW50b3J5O1xyXG4gICAgfVxyXG4gICAgcHVibGljIGdldFNpemUoKSA6YW55IHtcclxuICAgICAgICByZXR1cm4gdGhpcy5zaXplO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBnZXRKc29uKCk6c3RyaW5ne1xyXG4gICAgICAgXHJcbiAgICAgICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KHRoaXMpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBzZXRJZChpZDpzdHJpbmcpe1xyXG4gICAgICAgIHRoaXMuaWQgPSBpZDtcclxuICAgIH1cclxuICAgIHB1YmxpYyBzZXRTaXplKHNpemU6bnVtYmVyKXtcclxuICAgICAgICB0aGlzLnNpemU9c2l6ZTtcclxuICAgIH1cclxuICAgIHB1YmxpYyBzZXRJbnZlbnRvcnkoaW52ZW50b3J5Om51bWJlcil7XHJcbiAgICAgICAgdGhpcy5pbnZlbnRvcnk9aW52ZW50b3J5O1xyXG4gICAgfVxyXG4gICAgcHVibGljIHNldFNlbGVjdGVkKHNlbGVjdDpudW1iZXIpe1xyXG4gICAgIFxyXG4gICAgICAgIGlmKHRoaXMuaW52ZW50b3J5IC0gKHRoaXMuc2VsZWN0ZWQgKyBzZWxlY3QpPDApe1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJOb3QgZW5vdWdoIGl0ZW1zIGluIHRoZSBpbnZlbnRvcnlcIik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuc2VsZWN0ZWQgPSBzZWxlY3Q7XHJcbiAgICAgICAgdGhpcy5pbnZlbnRvcnkgPSB0aGlzLmludmVudG9yeSAtIHRoaXMuc2VsZWN0ZWQ7XHJcbiAgICAgXHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHNldFNlbGVjdGVkQW5kVXBkYXRlSW52ZW50b3J5KHNlbGVjdDpudW1iZXIpe1xyXG4gICAgICAgIGNvbnNvbGUubG9nKFwiYWN0dWFsIGludmVudG9yeSA9IFwiICsgdGhpcy5pbnZlbnRvcnkgKyBcIiBhY3R1YWwgc2VsZWN0ZWQgaXRlbXMgPSBcIiArIHRoaXMuc2VsZWN0ZWQgKyBcIiBuZXcgc2VsZWN0ZWQgaXRlbXMgPSBcIiArIHNlbGVjdCk7XHJcbiAgICAgXHJcbiAgICAgICAgaWYoc2VsZWN0ID49IHRoaXMuc2VsZWN0ZWQpe1xyXG4gICAgICAgICAgICAvL2FnZ2l1bmdvIGl0ZW1zIG5lbGwgaW52ZW50YXJpb1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgdGhpcy5pbnZlbnRvcnkgPSB0aGlzLnNlbGVjdGVkO1xyXG4gICAgICAgICAgICB0aGlzLnNlbGVjdGVkID0gc2VsZWN0O1xyXG4gICAgICAgIH1lbHNle1xyXG4gICAgICAgICAgICAvL3RvbGdvIGl0ZW1zIGRhbGwnaW52ZW50YXJpb1xyXG4gICAgICAgICAgIFxyXG4gICAgICAgICAgICB0aGlzLmludmVudG9yeSA9IHRoaXMuc2VsZWN0ZWQ7XHJcbiAgICAgICAgICAgIHRoaXMuc2VsZWN0ZWQgPSBzZWxlY3Q7XHJcbiAgICAgICAgfVxyXG4gICAgIFxyXG4gICAgfVxyXG5cclxuXHJcbiAgICBwdWJsaWMgYWRkU2VsZWN0ZWQoc2VsZWN0Om51bWJlcil7XHJcbiAgICAgXHJcbiAgICAgICAgaWYoKHRoaXMuaW52ZW50b3J5IC0gIHNlbGVjdCk8MCl7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIk5vdCBlbm91Z2ggaXRlbXMgaW4gdGhlIGludmVudG9yeVwiKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5zZWxlY3RlZCArPSBzZWxlY3Q7XHJcbiAgICAgICAgdGhpcy5pbnZlbnRvcnkgPSB0aGlzLmludmVudG9yeSAtIHNlbGVjdDtcclxuICAgICBcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgYWRtaW5TZXRTZWxlY3RlZChzZWxlY3Q6bnVtYmVyKXtcclxuICAgICAgICB0aGlzLnNlbGVjdGVkID0gc2VsZWN0O1xyXG4gIFxyXG4gICAgIFxyXG4gICAgfVxyXG4gICAgcHVibGljIGdldFNlbGVjdGVkKCk6bnVtYmVye1xyXG4gICAgICAgIHJldHVybiB0aGlzLnNlbGVjdGVkO1xyXG5cclxuXHJcblxyXG4gICAgfVxyXG4gICAgcHVibGljIHNldEJhcmNvZGUoYmFyY29kZTpzdHJpbmcpe1xyXG4gICAgICAgIHRoaXMuYmFyY29kZSA9IGJhcmNvZGU7XHJcbiAgICB9XHJcblxyXG4gICAgXHJcbn0iXX0=