import { Inject, Injectable } from '@angular/core';
import { HttpClient, HttpParams } from '@angular/common/http';
import { map } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common/http";
export class ProductsService {
    constructor(http, environment) {
        this.http = http;
        this.environment = environment;
        this.apiUrlProducts = this.environment.apiURL + 'products';
    }
    // BASIC
    // Get all products in the database - optional category query params
    getProducts(categoriesFilter) {
        let params = new HttpParams();
        if (categoriesFilter) {
            params = params.append('categories', categoriesFilter.join(','));
            console.log(params);
        }
        return this.http.get(this.apiUrlProducts, { params: params });
    }
    getFilteredProducts(brand, category, sex) {
        console.log("cerco con questi parametri-> brand = " + brand + " caetgory = + " + category + " sex = " + sex);
        let params = new HttpParams();
        if (brand != null) {
            params = params.append('brand', brand);
            console.log(params);
        }
        if (category) {
            params = params.append('category', category.join(','));
            console.log(params);
        }
        params = params.append('sex', sex);
        return this.http.get(`${this.apiUrlProducts}/filteredProducts`, { params: params });
    }
    // SEX FILTER
    // Get products for men - optional categories query params
    getMProducts(categoriesFilter) {
        let params = new HttpParams();
        if (categoriesFilter) {
            params = params.append('categories', categoriesFilter.join(','));
            console.log(params);
        }
        return this.http.get(`${this.apiUrlProducts}/get/men-prods`, {
            params: params,
        });
    }
    // Get products for women - optional categories query params
    getWProducts(categoriesFilter) {
        let params = new HttpParams();
        if (categoriesFilter) {
            params = params.append('categories', categoriesFilter.join(','));
        }
        return this.http.get(`${this.apiUrlProducts}/get/women-prods`, {
            params: params,
        });
    }
    getAllProductsByBrand(brandFilter) {
        let params = new HttpParams();
        if (brandFilter) {
            params = params.append('brand', brandFilter);
        }
        return this.http.get(`${this.apiUrlProducts}/get/brand/all`, {
            params: params,
        });
    }
    getAllMProductsByBrand(brandFilter) {
        let params = new HttpParams();
        if (brandFilter) {
            params = params.append('brand', brandFilter);
        }
        return this.http.get(`${this.apiUrlProducts}/get/brand/men`, {
            params: params,
        });
    }
    getAllWProductsByBrand(brandFilter) {
        let params = new HttpParams();
        if (brandFilter) {
            params = params.append('brand', brandFilter);
        }
        return this.http.get(`${this.apiUrlProducts}/get/brand/women`, {
            params: params,
        });
    }
    // Get products for men - optional categories & brand query params
    getMproductsFilteredByCategoryAndBrand(categoriesFilter, brandFilter) {
        let params = new HttpParams();
        if (categoriesFilter) {
            params = params.append('categories', categoriesFilter.join(','));
        }
        if (brandFilter) {
            params = params.append('brand', brandFilter);
        }
        return this.http.get(`${this.apiUrlProducts}/get/brand-and-category/men`, {
            params: params,
        });
    }
    // Get products for women - optional categories & brand query params
    getWproductsFilteredByCategoryAndBrand(categoriesFilter, brandFilter) {
        let params = new HttpParams();
        if (categoriesFilter) {
            params = params.append('categories', categoriesFilter.join(','));
        }
        if (brandFilter) {
            params = params.append('brand', brandFilter);
        }
        return this.http.get(`${this.apiUrlProducts}/get/brand-and-category/women`, { params: params });
    }
    // Get all products filtered by brand only.
    getProductsByBrand(brandId) {
        return this.http.get(`${this.apiUrlProducts}/brand/${brandId}`);
    }
    getWProductsByBrand(brandId) {
        return this.http.get(`${this.apiUrlProducts}/brand/women-products/${brandId}`);
    }
    getProduct(productId) {
        let response = this.http.get(`${this.apiUrlProducts}/${productId}`);
        return response;
    }
    getProduct2(productId) {
        let response = this.http.get(`${this.apiUrlProducts}/${productId}`);
        return response;
    }
    getProductByName(prodName) {
        return this.http.get(`${this.apiUrlProducts}/prodname/${prodName}`);
    }
    createProduct(productData) {
        return this.http.post(this.apiUrlProducts, productData);
    }
    updateProduct(productData, productid) {
        return this.http.put(`${this.apiUrlProducts}/${productid}`, productData);
    }
    updateProductWithVariant(productData, productid) {
        return this.http.put(`${this.apiUrlProducts}/${productid}/add/variant`, productData);
    }
    deleteProduct(productId) {
        return this.http.delete(`${this.apiUrlProducts}/${productId}`);
    }
    getProductsCount() {
        return this.http
            .get(`${this.apiUrlProducts}/get/count`)
            .pipe(map((objectValue) => objectValue.productCount));
    }
    getFeaturedProducts() {
        return this.http.get(`${this.apiUrlProducts}/get/featured/`);
    }
    getFeaturedProductsByBrand(brand) {
        return this.http.get(`${this.apiUrlProducts}/get/featured/` + brand);
    }
    addGallery(productId, galleryFormData) {
        console.log("sending post request, adding to gallery!");
        return this.http.post(`${this.apiUrlProducts}/gallery-images/${productId}`, galleryFormData);
    }
}
ProductsService.ɵfac = function ProductsService_Factory(t) { return new (t || ProductsService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject('environment')); };
ProductsService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: ProductsService, factory: ProductsService.ɵfac, providedIn: 'root' });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(ProductsService, [{
        type: Injectable,
        args: [{
                providedIn: 'root',
            }]
    }], function () { return [{ type: i1.HttpClient }, { type: undefined, decorators: [{
                type: Inject,
                args: ['environment']
            }] }]; }, null); })();
//# sourceMappingURL=data:application/json;base64,