export class ProductVariant {
    constructor(id, size, inventory, selected, barcode) {
        this.id = id;
        this.size = size;
        this.inventory = inventory;
        this.maxInventory = inventory;
        this.selected = selected;
        this.barcode = barcode;
    }
    setMainProductName(name) {
        this.mainProductName = name;
    }
    setMainProductImage(image) {
        this.mainProductImage = image;
    }
    setMainProductBrand(brand) {
        this.mainProductBrand = brand;
    }
    /**
     * Incrementa il numero di prodotti di questa variante selezionati
     */
    addProduct() {
        if (this.inventory - (this.selected + 1) <= 0) {
            throw new Error("Not enough items in the inventory");
        }
        this.selected++;
        this.inventory = this.inventory - this.selected;
    }
    getId() {
        return this.id;
    }
    getMaxInventory() {
        return this.maxInventory;
    }
    getInventory() {
        return this.inventory;
    }
    getSize() {
        return this.size;
    }
    getJson() {
        return JSON.stringify(this);
    }
    setId(id) {
        this.id = id;
    }
    setSize(size) {
        this.size = size;
    }
    setInventory(inventory) {
        this.inventory = inventory;
    }
    setSelected(select) {
        if (this.inventory - (this.selected + select) < 0) {
            throw new Error("Not enough items in the inventory");
        }
        this.selected = select;
        this.inventory = this.inventory - this.selected;
    }
    setSelectedAndUpdateInventory(select) {
        console.log("actual inventory = " + this.inventory + " actual selected items = " + this.selected + " new selected items = " + select);
        if (select >= this.selected) {
            //aggiungo items nell inventario
            this.inventory = this.selected;
            this.selected = select;
        }
        else {
            //tolgo items dall'inventario
            this.inventory = this.selected;
            this.selected = select;
        }
    }
    addSelected(select) {
        if ((this.inventory - select) < 0) {
            throw new Error("Not enough items in the inventory");
        }
        this.selected += select;
        this.inventory = this.inventory - select;
    }
    adminSetSelected(select) {
        this.selected = select;
    }
    getSelected() {
        return this.selected;
    }
    setBarcode(barcode) {
        this.barcode = barcode;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvZHVjdFZhcmlhbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9saWJzL29yZGVycy9zcmMvbGliL21vZGVscy9wcm9kdWN0VmFyaWFudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxNQUFNLE9BQU8sY0FBYztJQWN2QixZQUFZLEVBQVMsRUFBRSxJQUFTLEVBQUUsU0FBaUIsRUFBRSxRQUFnQixFQUFFLE9BQWM7UUFDakYsSUFBSSxDQUFDLEVBQUUsR0FBRyxFQUFFLENBQUM7UUFDYixJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQztRQUNqQixJQUFJLENBQUMsU0FBUyxHQUFHLFNBQVMsQ0FBQztRQUMzQixJQUFJLENBQUMsWUFBWSxHQUFHLFNBQVMsQ0FBQztRQUM5QixJQUFJLENBQUMsUUFBUSxHQUFHLFFBQVEsQ0FBQztRQUN6QixJQUFJLENBQUMsT0FBTyxHQUFHLE9BQU8sQ0FBQztJQUMzQixDQUFDO0lBR00sa0JBQWtCLENBQUMsSUFBWTtRQUNwQyxJQUFJLENBQUMsZUFBZSxHQUFHLElBQUksQ0FBQztJQUM5QixDQUFDO0lBQ00sbUJBQW1CLENBQUMsS0FBYTtRQUN0QyxJQUFJLENBQUMsZ0JBQWdCLEdBQUcsS0FBSyxDQUFDO0lBQ2hDLENBQUM7SUFDTSxtQkFBbUIsQ0FBQyxLQUFhO1FBQ3RDLElBQUksQ0FBQyxnQkFBZ0IsR0FBRyxLQUFLLENBQUM7SUFDaEMsQ0FBQztJQUdEOztPQUVHO0lBQ0ksVUFBVTtRQUNiLElBQUcsSUFBSSxDQUFDLFNBQVMsR0FBRyxDQUFDLElBQUksQ0FBQyxRQUFRLEdBQUUsQ0FBQyxDQUFDLElBQUUsQ0FBQyxFQUFDO1lBQ3RDLE1BQU0sSUFBSSxLQUFLLENBQUMsbUNBQW1DLENBQUMsQ0FBQztTQUN4RDtRQUNELElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQztRQUVoQixJQUFJLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQztJQUVwRCxDQUFDO0lBRU0sS0FBSztRQUNSLE9BQU8sSUFBSSxDQUFDLEVBQUUsQ0FBQztJQUNuQixDQUFDO0lBQ00sZUFBZTtRQUNsQixPQUFPLElBQUksQ0FBQyxZQUFZLENBQUM7SUFDN0IsQ0FBQztJQUVNLFlBQVk7UUFDZixPQUFPLElBQUksQ0FBQyxTQUFTLENBQUM7SUFDMUIsQ0FBQztJQUNNLE9BQU87UUFDVixPQUFPLElBQUksQ0FBQyxJQUFJLENBQUM7SUFDckIsQ0FBQztJQUVNLE9BQU87UUFFVixPQUFPLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDaEMsQ0FBQztJQUVNLEtBQUssQ0FBQyxFQUFTO1FBQ2xCLElBQUksQ0FBQyxFQUFFLEdBQUcsRUFBRSxDQUFDO0lBQ2pCLENBQUM7SUFDTSxPQUFPLENBQUMsSUFBUTtRQUNuQixJQUFJLENBQUMsSUFBSSxHQUFDLElBQUksQ0FBQztJQUNuQixDQUFDO0lBQ00sWUFBWSxDQUFDLFNBQWdCO1FBQ2hDLElBQUksQ0FBQyxTQUFTLEdBQUMsU0FBUyxDQUFDO0lBQzdCLENBQUM7SUFDTSxXQUFXLENBQUMsTUFBYTtRQUU1QixJQUFHLElBQUksQ0FBQyxTQUFTLEdBQUcsQ0FBQyxJQUFJLENBQUMsUUFBUSxHQUFHLE1BQU0sQ0FBQyxHQUFDLENBQUMsRUFBQztZQUMzQyxNQUFNLElBQUksS0FBSyxDQUFDLG1DQUFtQyxDQUFDLENBQUM7U0FDeEQ7UUFDRCxJQUFJLENBQUMsUUFBUSxHQUFHLE1BQU0sQ0FBQztRQUN2QixJQUFJLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQztJQUVwRCxDQUFDO0lBRU0sNkJBQTZCLENBQUMsTUFBYTtRQUM5QyxPQUFPLENBQUMsR0FBRyxDQUFDLHFCQUFxQixHQUFHLElBQUksQ0FBQyxTQUFTLEdBQUcsMkJBQTJCLEdBQUcsSUFBSSxDQUFDLFFBQVEsR0FBRyx3QkFBd0IsR0FBRyxNQUFNLENBQUMsQ0FBQztRQUV0SSxJQUFHLE1BQU0sSUFBSSxJQUFJLENBQUMsUUFBUSxFQUFDO1lBQ3ZCLGdDQUFnQztZQUVoQyxJQUFJLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUM7WUFDL0IsSUFBSSxDQUFDLFFBQVEsR0FBRyxNQUFNLENBQUM7U0FDMUI7YUFBSTtZQUNELDZCQUE2QjtZQUU3QixJQUFJLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUM7WUFDL0IsSUFBSSxDQUFDLFFBQVEsR0FBRyxNQUFNLENBQUM7U0FDMUI7SUFFTCxDQUFDO0lBR00sV0FBVyxDQUFDLE1BQWE7UUFFNUIsSUFBRyxDQUFDLElBQUksQ0FBQyxTQUFTLEdBQUksTUFBTSxDQUFDLEdBQUMsQ0FBQyxFQUFDO1lBQzVCLE1BQU0sSUFBSSxLQUFLLENBQUMsbUNBQW1DLENBQUMsQ0FBQztTQUN4RDtRQUNELElBQUksQ0FBQyxRQUFRLElBQUksTUFBTSxDQUFDO1FBQ3hCLElBQUksQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDLFNBQVMsR0FBRyxNQUFNLENBQUM7SUFFN0MsQ0FBQztJQUVNLGdCQUFnQixDQUFDLE1BQWE7UUFDakMsSUFBSSxDQUFDLFFBQVEsR0FBRyxNQUFNLENBQUM7SUFHM0IsQ0FBQztJQUNNLFdBQVc7UUFDZCxPQUFPLElBQUksQ0FBQyxRQUFRLENBQUM7SUFJekIsQ0FBQztJQUNNLFVBQVUsQ0FBQyxPQUFjO1FBQzVCLElBQUksQ0FBQyxPQUFPLEdBQUcsT0FBTyxDQUFDO0lBQzNCLENBQUM7Q0FHSiIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBjbGFzcyBQcm9kdWN0VmFyaWFudHtcblxuICAgICAvKippZCBkZWxsYSB2YXJpYW50ZSBkZWwgcHJvZG90dG8gKi9cbiAgICBwcml2YXRlIGlkOiBzdHJpbmc7XG4gICAgcHJpdmF0ZSBzaXplOiBhbnk7XG4gICAgcHJpdmF0ZSBpbnZlbnRvcnk6IG51bWJlcjtcbiAgICBwcml2YXRlIHNlbGVjdGVkOiBudW1iZXI7XG4gICAgcHVibGljIG1heEludmVudG9yeTogbnVtYmVyO1xuICAgIHByaXZhdGUgYmFyY29kZTogc3RyaW5nO1xuXG4gICAgcHJpdmF0ZSBtYWluUHJvZHVjdE5hbWU6IHN0cmluZztcbiAgICBwcml2YXRlIG1haW5Qcm9kdWN0SW1hZ2U6IHN0cmluZztcbiAgICBwcml2YXRlIG1haW5Qcm9kdWN0QnJhbmQ6IHN0cmluZztcblxuICAgIGNvbnN0cnVjdG9yKGlkOnN0cmluZywgc2l6ZTogYW55LCBpbnZlbnRvcnk6IG51bWJlciwgc2VsZWN0ZWQ6IG51bWJlciwgYmFyY29kZTpzdHJpbmcpe1xuICAgICAgICB0aGlzLmlkID0gaWQ7XG4gICAgICAgIHRoaXMuc2l6ZSA9IHNpemU7XG4gICAgICAgIHRoaXMuaW52ZW50b3J5ID0gaW52ZW50b3J5O1xuICAgICAgICB0aGlzLm1heEludmVudG9yeSA9IGludmVudG9yeTtcbiAgICAgICAgdGhpcy5zZWxlY3RlZCA9IHNlbGVjdGVkO1xuICAgICAgICB0aGlzLmJhcmNvZGUgPSBiYXJjb2RlO1xuICAgIH1cblxuXG4gICAgcHVibGljIHNldE1haW5Qcm9kdWN0TmFtZShuYW1lOiBzdHJpbmcpIDogdm9pZHtcbiAgICAgIHRoaXMubWFpblByb2R1Y3ROYW1lID0gbmFtZTtcbiAgICB9XG4gICAgcHVibGljIHNldE1haW5Qcm9kdWN0SW1hZ2UoaW1hZ2U6IHN0cmluZykgOiB2b2lke1xuICAgICAgdGhpcy5tYWluUHJvZHVjdEltYWdlID0gaW1hZ2U7XG4gICAgfVxuICAgIHB1YmxpYyBzZXRNYWluUHJvZHVjdEJyYW5kKGJyYW5kOiBzdHJpbmcpIDogdm9pZHtcbiAgICAgIHRoaXMubWFpblByb2R1Y3RCcmFuZCA9IGJyYW5kO1xuICAgIH1cblxuXG4gICAgLyoqXG4gICAgICogSW5jcmVtZW50YSBpbCBudW1lcm8gZGkgcHJvZG90dGkgZGkgcXVlc3RhIHZhcmlhbnRlIHNlbGV6aW9uYXRpXG4gICAgICovXG4gICAgcHVibGljIGFkZFByb2R1Y3QoKSA6dm9pZCB7XG4gICAgICAgIGlmKHRoaXMuaW52ZW50b3J5IC0gKHRoaXMuc2VsZWN0ZWQgKzEpPD0wKXtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIk5vdCBlbm91Z2ggaXRlbXMgaW4gdGhlIGludmVudG9yeVwiKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnNlbGVjdGVkKys7XG5cbiAgICAgICAgdGhpcy5pbnZlbnRvcnkgPSB0aGlzLmludmVudG9yeSAtIHRoaXMuc2VsZWN0ZWQ7XG5cbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0SWQoKSA6c3RyaW5nIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaWQ7XG4gICAgfVxuICAgIHB1YmxpYyBnZXRNYXhJbnZlbnRvcnkoKSA6bnVtYmVyIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubWF4SW52ZW50b3J5O1xuICAgIH1cblxuICAgIHB1YmxpYyBnZXRJbnZlbnRvcnkoKSA6bnVtYmVyIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaW52ZW50b3J5O1xuICAgIH1cbiAgICBwdWJsaWMgZ2V0U2l6ZSgpIDphbnkge1xuICAgICAgICByZXR1cm4gdGhpcy5zaXplO1xuICAgIH1cblxuICAgIHB1YmxpYyBnZXRKc29uKCk6c3RyaW5ne1xuXG4gICAgICAgIHJldHVybiBKU09OLnN0cmluZ2lmeSh0aGlzKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgc2V0SWQoaWQ6c3RyaW5nKXtcbiAgICAgICAgdGhpcy5pZCA9IGlkO1xuICAgIH1cbiAgICBwdWJsaWMgc2V0U2l6ZShzaXplOmFueSl7XG4gICAgICAgIHRoaXMuc2l6ZT1zaXplO1xuICAgIH1cbiAgICBwdWJsaWMgc2V0SW52ZW50b3J5KGludmVudG9yeTpudW1iZXIpe1xuICAgICAgICB0aGlzLmludmVudG9yeT1pbnZlbnRvcnk7XG4gICAgfVxuICAgIHB1YmxpYyBzZXRTZWxlY3RlZChzZWxlY3Q6bnVtYmVyKXtcblxuICAgICAgICBpZih0aGlzLmludmVudG9yeSAtICh0aGlzLnNlbGVjdGVkICsgc2VsZWN0KTwwKXtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIk5vdCBlbm91Z2ggaXRlbXMgaW4gdGhlIGludmVudG9yeVwiKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnNlbGVjdGVkID0gc2VsZWN0O1xuICAgICAgICB0aGlzLmludmVudG9yeSA9IHRoaXMuaW52ZW50b3J5IC0gdGhpcy5zZWxlY3RlZDtcblxuICAgIH1cblxuICAgIHB1YmxpYyBzZXRTZWxlY3RlZEFuZFVwZGF0ZUludmVudG9yeShzZWxlY3Q6bnVtYmVyKXtcbiAgICAgICAgY29uc29sZS5sb2coXCJhY3R1YWwgaW52ZW50b3J5ID0gXCIgKyB0aGlzLmludmVudG9yeSArIFwiIGFjdHVhbCBzZWxlY3RlZCBpdGVtcyA9IFwiICsgdGhpcy5zZWxlY3RlZCArIFwiIG5ldyBzZWxlY3RlZCBpdGVtcyA9IFwiICsgc2VsZWN0KTtcblxuICAgICAgICBpZihzZWxlY3QgPj0gdGhpcy5zZWxlY3RlZCl7XG4gICAgICAgICAgICAvL2FnZ2l1bmdvIGl0ZW1zIG5lbGwgaW52ZW50YXJpb1xuXG4gICAgICAgICAgICB0aGlzLmludmVudG9yeSA9IHRoaXMuc2VsZWN0ZWQ7XG4gICAgICAgICAgICB0aGlzLnNlbGVjdGVkID0gc2VsZWN0O1xuICAgICAgICB9ZWxzZXtcbiAgICAgICAgICAgIC8vdG9sZ28gaXRlbXMgZGFsbCdpbnZlbnRhcmlvXG5cbiAgICAgICAgICAgIHRoaXMuaW52ZW50b3J5ID0gdGhpcy5zZWxlY3RlZDtcbiAgICAgICAgICAgIHRoaXMuc2VsZWN0ZWQgPSBzZWxlY3Q7XG4gICAgICAgIH1cblxuICAgIH1cblxuXG4gICAgcHVibGljIGFkZFNlbGVjdGVkKHNlbGVjdDpudW1iZXIpe1xuXG4gICAgICAgIGlmKCh0aGlzLmludmVudG9yeSAtICBzZWxlY3QpPDApe1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiTm90IGVub3VnaCBpdGVtcyBpbiB0aGUgaW52ZW50b3J5XCIpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuc2VsZWN0ZWQgKz0gc2VsZWN0O1xuICAgICAgICB0aGlzLmludmVudG9yeSA9IHRoaXMuaW52ZW50b3J5IC0gc2VsZWN0O1xuXG4gICAgfVxuXG4gICAgcHVibGljIGFkbWluU2V0U2VsZWN0ZWQoc2VsZWN0Om51bWJlcil7XG4gICAgICAgIHRoaXMuc2VsZWN0ZWQgPSBzZWxlY3Q7XG5cblxuICAgIH1cbiAgICBwdWJsaWMgZ2V0U2VsZWN0ZWQoKTpudW1iZXJ7XG4gICAgICAgIHJldHVybiB0aGlzLnNlbGVjdGVkO1xuXG5cblxuICAgIH1cbiAgICBwdWJsaWMgc2V0QmFyY29kZShiYXJjb2RlOnN0cmluZyl7XG4gICAgICAgIHRoaXMuYmFyY29kZSA9IGJhcmNvZGU7XG4gICAgfVxuXG5cbn1cbiJdfQ==